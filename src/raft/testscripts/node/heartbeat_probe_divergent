# A heartbeat while the leader is probing a follower with a long divergent tail
# doesn't disrupt the probing, and won't result in a quadratically increasing
# amount of probes with each heartbeat.

cluster nodes=3 leader=1
---
n1@1 leader last=1@1 commit=1@1 applied=1 progress={2:1→2 3:1→2}
n2@1 follower(n1) last=1@1 commit=1@1 applied=1
n3@1 follower(n1) last=1@1 commit=1@1 applied=1

# Make a couple of writes to ensure a common log prefix.
(put 1 a=1)
(put 1 b=2)
(stabilize)
status
---
n1@1 leader last=3@1 commit=3@1 applied=3 progress={2:3→4 3:3→4}
n2@1 follower(n1) last=3@1 commit=1@1 applied=1
n3@1 follower(n1) last=3@1 commit=1@1 applied=1

# Partition n1
partition 1
---
n1 ⇹ n2 n3

# Elect new leaders in the majority partition and replicate a few writes.
(campaign 2)
(stabilize)
(put 2 c=3)
(put 2 d=4)
(stabilize heartbeat=true)
status
---
n1@1 leader last=3@1 commit=3@1 applied=3 progress={2:3→4 3:3→4}
n2@2 leader last=6@2 commit=6@2 applied=6 progress={1:0→7 3:6→7}
n3@2 follower(n2) last=6@2 commit=6@2 applied=6

(campaign 3)
(stabilize)
(put 2 e=5)
(put 2 f=6)
(stabilize heartbeat=true)
status
---
n1@1 leader last=3@1 commit=3@1 applied=3 progress={2:3→4 3:3→4}
n2@3 follower(n3) last=9@3 commit=9@3 applied=9
n3@3 leader last=9@3 commit=9@3 applied=9 progress={1:0→10 2:9→10}

# Propose writes in the minority partition as well, to build up a divergent log.
(put 1 a=2)
(put 1 a=3)
(put 1 a=4)
(put 1 a=5)
(put 1 a=6)
(put 1 a=7)
(put 1 a=8)
(put 1 a=9)
(stabilize)
status
---
n1@1 leader last=11@1 commit=3@1 applied=3 progress={2:3→12 3:3→12}
n2@3 follower(n3) last=9@3 commit=9@3 applied=9
n3@3 leader last=9@3 commit=9@3 applied=9 progress={1:0→10 2:9→10}

# Heal the partition.
heal
---
n1 n2 n3 fully connected

# Propose another write on the majority leader to start probing.
put 3 g=7
---
c3@3 → n3 ClientRequest id=0x0f write 0x0101670137
n3@3 append 10@3 put g=7
n3@3 → n1 Append base=9@3 [10@3]
n3@3 → n2 Append base=9@3 [10@3]

# The append should be rejected by n1, canceling the writes.
deliver 1
---
n1@1 leader ⇨ n1@3 follower(n3)
n1@1 → c1 ClientResponse id=0x07 Error::Abort
c1@1 put a=2 ⇒ Error::Abort (operation aborted)
n1@1 → c1 ClientResponse id=0x08 Error::Abort
c1@1 put a=3 ⇒ Error::Abort (operation aborted)
n1@1 → c1 ClientResponse id=0x09 Error::Abort
c1@1 put a=4 ⇒ Error::Abort (operation aborted)
n1@1 → c1 ClientResponse id=0x0a Error::Abort
c1@1 put a=5 ⇒ Error::Abort (operation aborted)
n1@1 → c1 ClientResponse id=0x0b Error::Abort
c1@1 put a=6 ⇒ Error::Abort (operation aborted)
n1@1 → c1 ClientResponse id=0x0c Error::Abort
c1@1 put a=7 ⇒ Error::Abort (operation aborted)
n1@1 → c1 ClientResponse id=0x0d Error::Abort
c1@1 put a=8 ⇒ Error::Abort (operation aborted)
n1@1 → c1 ClientResponse id=0x0e Error::Abort
c1@1 put a=9 ⇒ Error::Abort (operation aborted)
n1@3 → n3 AppendResponse reject_index=9

# n3 begins probing, and also heartbeats.
deliver 3
heartbeat 3
deliver 1
status 3
---
n3@3 → n1 Append base=8@3 []
n3@3 → n1 Heartbeat last_index=10 commit_index=9 read_seq=0
n3@3 → n2 Heartbeat last_index=10 commit_index=9 read_seq=0
n1@3 → n3 AppendResponse reject_index=8
n1@3 → n3 HeartbeatResponse match_index=0 read_seq=0
n3@3 leader last=10@3 commit=9@3 applied=9 progress={1:0→9 2:9→11}

# n3 receives probe and heartbeat responses, resulting in duplicate
# probes being sent at base index 7.
deliver 3
status 3
---
n3@3 → n1 Append base=7@3 []
n3@3 → n1 Append base=7@3 []
n3@3 leader last=10@3 commit=9@3 applied=9 progress={1:0→8 2:9→11}

deliver 1
---
n1@3 → n3 AppendResponse reject_index=7
n1@3 → n3 AppendResponse reject_index=7

# However, when receiving the duplicate probe responses, they are
# deduplicated and only a single new probe is sent.
deliver 3
---
n3@3 → n1 Append base=6@2 []

deliver 1
---
n1@3 → n3 AppendResponse reject_index=6

# n3 heartbeats again before sending the next probe. This results in
# two probes: the heartbeat response resends the probe at base 5, while
# the probe response triggers a new probe at base 4.
heartbeat 3
deliver 3
---
n3@3 → n1 Heartbeat last_index=10 commit_index=9 read_seq=0
n3@3 → n2 Heartbeat last_index=10 commit_index=9 read_seq=0
n3@3 → n1 Append base=5@2 []

deliver 1
---
n1@3 → n3 HeartbeatResponse match_index=0 read_seq=0
n1@3 → n3 AppendResponse reject_index=5

deliver 3
---
n3@3 → n1 Append base=5@2 []
n3@3 → n1 Append base=4@2 []

deliver 1
---
n1@3 → n3 AppendResponse reject_index=5
n1@3 → n3 AppendResponse reject_index=4

# The probe response at reject_index=5 is ignored, since we're already probed
# it. Only a single new probe is sent at base 4.
deliver 3
---
n3@3 → n1 Append base=3@1 []

# When delivered, we finally get a match, and the follower gets caught up.
deliver 1
---
n1@3 → n3 AppendResponse match_index=3

deliver 3
---
n3@3 → n1 Append base=3@1 [4@2 5@2 6@2 7@3 8@3 9@3 10@3]

deliver 1
---
n1@3 append 4@2 None
n1@3 append 5@2 put c=3
n1@3 append 6@2 put d=4
n1@3 append 7@3 None
n1@3 append 8@3 put e=5
n1@3 append 9@3 put f=6
n1@3 append 10@3 put g=7
n1@3 → n3 AppendResponse match_index=10

deliver 3
---
n3@3 commit 10@3
n3@3 apply 10@3 put g=7
n3@3 → c3 ClientResponse id=0x0f write 0x010a
c3@3 put g=7 ⇒ 10
