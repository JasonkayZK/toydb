# A new leader that's behind on commit/apply shouldn't serve stale reads.

cluster nodes=3 leader=1
---
n1@1 leader last=1@1 commit=1@1 applied=1 progress={2:1→2 3:1→2}
n2@1 follower(n1) last=1@1 commit=1@1 applied=1
n3@1 follower(n1) last=1@1 commit=1@1 applied=1

# Write an initial value, and propagate the commit index.
(put 1 a=1)
(stabilize heartbeat=true)
status
---
n1@1 leader last=2@1 commit=2@1 applied=2 progress={2:2→3 3:2→3}
n2@1 follower(n1) last=2@1 commit=2@1 applied=2
n3@1 follower(n1) last=2@1 commit=2@1 applied=2

# Write another value, but don't propagate the commit index.
(put 1 b=2)
(stabilize)
status
---
n1@1 leader last=3@1 commit=3@1 applied=3 progress={2:3→4 3:3→4}
n2@1 follower(n1) last=3@1 commit=2@1 applied=2
n3@1 follower(n1) last=3@1 commit=2@1 applied=2

# n2 now campaigns and wins, while being behind on commit/apply.
campaign 2
deliver
---
n2@1 follower(n1) ⇨ n2@2 candidate
n2@2 → n1 Campaign last=3@1
n2@2 → n3 Campaign last=3@1
n1@1 leader ⇨ n1@2 follower()
n1@2 → n2 CampaignResponse vote=true
n3@1 follower(n1) ⇨ n3@2 follower()
n3@2 → n2 CampaignResponse vote=true

# The initial append doesn't make it to the followers, so its commit index
# trails the previous leader.
partition 2
deliver 2
---
n2 ⇹ n1 n3
n2@2 candidate ⇨ n2@2 leader
n2@2 append 4@2 None
n2@2 ⇥ n1 A̶p̶p̶e̶n̶d̶ ̶b̶a̶s̶e̶=̶3̶@̶1̶ ̶[̶4̶@̶2̶]̶
n2@2 ⇥ n3 A̶p̶p̶e̶n̶d̶ ̶b̶a̶s̶e̶=̶3̶@̶1̶ ̶[̶4̶@̶2̶]̶
n2@2 ⇥ n1 H̶e̶a̶r̶t̶b̶e̶a̶t̶ ̶l̶a̶s̶t̶_̶i̶n̶d̶e̶x̶=̶4̶ ̶c̶o̶m̶m̶i̶t̶_̶i̶n̶d̶e̶x̶=̶2̶ ̶r̶e̶a̶d̶_̶s̶e̶q̶=̶0̶
n2@2 ⇥ n3 H̶e̶a̶r̶t̶b̶e̶a̶t̶ ̶l̶a̶s̶t̶_̶i̶n̶d̶e̶x̶=̶4̶ ̶c̶o̶m̶m̶i̶t̶_̶i̶n̶d̶e̶x̶=̶2̶ ̶r̶e̶a̶d̶_̶s̶e̶q̶=̶0̶

heal
status
---
n1 n2 n3 fully connected
n1@2 follower() last=3@1 commit=3@1 applied=3
n2@2 leader last=4@2 commit=2@1 applied=2 progress={1:0→5 3:0→5}
n3@2 follower() last=3@1 commit=2@1 applied=2

# Reading from n2 should not result in a stale read even if followers
# confirm the read sequence.
get 2 b
deliver
deliver
---
c2@2 → n2 ClientRequest id=0x03 read 0x000162
n2@2 → n1 Read seq=1
n2@2 → n3 Read seq=1
n1@2 follower() ⇨ n1@2 follower(n2)
n1@2 → n2 ReadResponse seq=1
n3@2 follower() ⇨ n3@2 follower(n2)
n3@2 → n2 ReadResponse seq=1

# The leader heartbeats and detects the lost appends.
heartbeat 2
deliver
deliver
deliver
---
n2@2 → n1 Heartbeat last_index=4 commit_index=2 read_seq=1
n2@2 → n3 Heartbeat last_index=4 commit_index=2 read_seq=1
n1@2 → n2 HeartbeatResponse match_index=0 read_seq=1
n3@2 → n2 HeartbeatResponse match_index=0 read_seq=1
n2@2 → n1 Append base=3@1 []
n2@2 → n3 Append base=3@1 []
n1@2 → n2 AppendResponse match_index=3
n3@2 → n2 AppendResponse match_index=3

# It resends the missing log entry.
deliver
deliver
---
n2@2 → n1 Append base=3@1 [4@2]
n2@2 → n3 Append base=3@1 [4@2]
n1@2 append 4@2 None
n1@2 → n2 AppendResponse match_index=4
n3@2 append 4@2 None
n3@2 → n2 AppendResponse match_index=4

# Once the leader receives the acks it commits the entry. The read can now be
# served, resulting in an up-to-date b=2.
stabilize
---
n2@2 commit 4@2
n2@2 apply 3@1 put b=2
n2@2 apply 4@2 None
n2@2 → c2 ClientResponse id=0x03 read 0x00010132
c2@2 get b ⇒ 2
