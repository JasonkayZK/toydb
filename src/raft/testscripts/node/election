# A node campaigns and wins leadership once the election timeout passes. Uses
# ticks directly to also test tick handling.

cluster nodes=3 heartbeat_interval=1 election_timeout=2
---
n1@0 follower() last=0@0 commit=0@0 applied=0
n2@0 follower() last=0@0 commit=0@0 applied=0
n3@0 follower() last=0@0 commit=0@0 applied=0

# Tick all nodes. Then tick n1 again to make it campaign.
tick
---
ok

tick 1
---
n1@0 follower() ⇨ n1@1 candidate
n1@1 → n2 Campaign last=0@0
n1@1 → n3 Campaign last=0@0

# n2,n3 grant n1 their votes.
deliver
---
n2@0 follower() ⇨ n2@1 follower()
n2@1 → n1 CampaignResponse vote=true
n3@0 follower() ⇨ n3@1 follower()
n3@1 → n1 CampaignResponse vote=true

# n1 wins the election and becomes leader.
deliver
---
n1@1 candidate ⇨ n1@1 leader
n1@1 append 1@1 None
n1@1 → n2 Append base=0@0 [1@1]
n1@1 → n3 Append base=0@0 [1@1]
n1@1 → n2 Heartbeat last_index=1 commit_index=0 read_seq=0
n1@1 → n3 Heartbeat last_index=1 commit_index=0 read_seq=0

# All nodes become n1 followers.
stabilize
---
n2@1 follower() ⇨ n2@1 follower(n1)
n2@1 append 1@1 None
n2@1 → n1 AppendResponse match_index=1
n2@1 → n1 HeartbeatResponse match_index=1 read_seq=0
n3@1 follower() ⇨ n3@1 follower(n1)
n3@1 append 1@1 None
n3@1 → n1 AppendResponse match_index=1
n3@1 → n1 HeartbeatResponse match_index=1 read_seq=0
n1@1 commit 1@1
n1@1 apply 1@1 None

# n1's heartbeats are accepted by followers, who commit and apply the entry.
tick 1
---
n1@1 → n2 Heartbeat last_index=1 commit_index=1 read_seq=0
n1@1 → n3 Heartbeat last_index=1 commit_index=1 read_seq=0

stabilize
---
n2@1 commit 1@1
n2@1 apply 1@1 None
n2@1 → n1 HeartbeatResponse match_index=1 read_seq=0
n3@1 commit 1@1
n3@1 apply 1@1 None
n3@1 → n1 HeartbeatResponse match_index=1 read_seq=0

status
---
n1@1 leader last=1@1 commit=1@1 applied=1 progress={2:1→2 3:1→2}
n2@1 follower(n1) last=1@1 commit=1@1 applied=1
n3@1 follower(n1) last=1@1 commit=1@1 applied=1
